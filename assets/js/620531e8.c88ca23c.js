"use strict";(self.webpackChunkreflex_docs=self.webpackChunkreflex_docs||[]).push([[1401],{1494:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=o(4848),r=o(8453);const i={sidebar_position:1},s="Basic Backrun Example",a={id:"technical/examples/basic-backrun",title:"Basic Backrun Example",description:"Learn how to implement a basic MEV backrun using Reflex Protocol. This example demonstrates the fundamental concepts of MEV capture and profit distribution.",source:"@site/docs/technical/examples/basic-backrun.md",sourceDirName:"technical/examples",slug:"/technical/examples/basic-backrun",permalink:"/reflex/technical/examples/basic-backrun",draft:!1,unlisted:!1,editUrl:"https://github.com/reflex-mev/reflex/tree/main/website/docs/technical/examples/basic-backrun.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"SDK Integration",permalink:"/reflex/technical/integration/sdk-integration"},next:{title:"Smart Contracts API",permalink:"/reflex/technical/api/smart-contracts"}},l={},c=[{value:"\ud83c\udfaf Overview",id:"-overview",level:2},{value:"\ud83d\udee0\ufe0f Prerequisites",id:"\ufe0f-prerequisites",level:2},{value:"\ud83d\udce6 Setup",id:"-setup",level:2},{value:"\ud83d\udca1 Basic Implementation",id:"-basic-implementation",level:2},{value:"Step 1: Initialize SDK",id:"step-1-initialize-sdk",level:3},{value:"Step 2: Pool Monitor",id:"step-2-pool-monitor",level:3},{value:"Step 3: Main Application",id:"step-3-main-application",level:3},{value:"Step 4: Configuration Script",id:"step-4-configuration-script",level:3},{value:"\ud83d\ude80 Running the Example",id:"-running-the-example",level:2},{value:"1. Configure Revenue Sharing",id:"1-configure-revenue-sharing",level:3},{value:"2. Start Monitoring",id:"2-start-monitoring",level:3},{value:"3. When a Swap Occurs",id:"3-when-a-swap-occurs",level:3},{value:"\ud83d\udcca Understanding the Results",id:"-understanding-the-results",level:2},{value:"Profit Calculation",id:"profit-calculation",level:3},{value:"\ud83d\udd27 Customization",id:"-customization",level:2},{value:"Adjust Backrun Parameters",id:"adjust-backrun-parameters",level:3},{value:"Add More Pools",id:"add-more-pools",level:3},{value:"Custom Profit Sharing",id:"custom-profit-sharing",level:3},{value:"\ud83d\udc1b Troubleshooting",id:"-troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"\ud83c\udfaf Next Steps",id:"-next-steps",level:2},{value:"\ud83d\udcda Additional Resources",id:"-additional-resources",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"basic-backrun-example",children:"Basic Backrun Example"})}),"\n",(0,t.jsx)(e.p,{children:"Learn how to implement a basic MEV backrun using Reflex Protocol. This example demonstrates the fundamental concepts of MEV capture and profit distribution."}),"\n",(0,t.jsx)(e.h2,{id:"-overview",children:"\ud83c\udfaf Overview"}),"\n",(0,t.jsx)(e.p,{children:"In this example, we'll:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsx)(e.li,{children:"Set up a simple MEV monitoring system"}),"\n",(0,t.jsx)(e.li,{children:"Detect arbitrage opportunities"}),"\n",(0,t.jsx)(e.li,{children:"Execute profitable backruns"}),"\n",(0,t.jsx)(e.li,{children:"Distribute profits to users"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"\ufe0f-prerequisites",children:"\ud83d\udee0\ufe0f Prerequisites"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u2705 Node.js v18+"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 Ethers.js v6"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 Reflex SDK installed"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 Access to Ethereum testnet (Goerli)"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-setup",children:"\ud83d\udce6 Setup"}),"\n",(0,t.jsx)(e.p,{children:"Create a new project and install dependencies:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"mkdir reflex-backrun-example\ncd reflex-backrun-example\nnpm init -y\nnpm install @reflex/sdk ethers dotenv\nnpm install -D typescript @types/node ts-node\n"})}),"\n",(0,t.jsx)(e.p,{children:"Create environment configuration:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",metastring:'title=".env"',children:"# Network\nRPC_URL=https://goerli.infura.io/v3/YOUR_PROJECT_ID\nPRIVATE_KEY=your_private_key_here\n\n# Reflex Contracts (Goerli)\nREFLEX_ROUTER=0x742d35Cc6634C0532925a3b8D598C4B4B3A3A3A3\nREFLEX_QUOTER=0x9E545E3C0baAB3E08CdfD552C960A1050f373042\n\n# Configuration\nCONFIG_ID=0x1234567890123456789012345678901234567890123456789012345678901234\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-basic-implementation",children:"\ud83d\udca1 Basic Implementation"}),"\n",(0,t.jsx)(e.h3,{id:"step-1-initialize-sdk",children:"Step 1: Initialize SDK"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",metastring:'title="src/reflex-client.ts"',children:'import { ethers } from "ethers";\nimport { ReflexSDK } from "@reflex/sdk";\nimport * as dotenv from "dotenv";\n\ndotenv.config();\n\nexport class ReflexClient {\n  private provider: ethers.Provider;\n  private signer: ethers.Signer;\n  private reflex: ReflexSDK;\n\n  constructor() {\n    this.provider = new ethers.JsonRpcProvider(process.env.RPC_URL);\n    this.signer = new ethers.Wallet(process.env.PRIVATE_KEY!, this.provider);\n\n    this.reflex = new ReflexSDK(\n      this.provider,\n      process.env.REFLEX_ROUTER!,\n      process.env.REFLEX_QUOTER\n    );\n  }\n\n  async getBalance(): Promise<bigint> {\n    return await this.provider.getBalance(this.signer.address);\n  }\n\n  async triggerBackrun(params: {\n    poolId: string;\n    swapAmount: bigint;\n    token0In: boolean;\n    recipient: string;\n  }) {\n    try {\n      console.log("\ud83c\udfaf Attempting backrun...");\n      console.log("Pool:", params.poolId);\n      console.log("Amount:", ethers.formatEther(params.swapAmount));\n\n      // Estimate gas first\n      const gasEstimate = await this.reflex.estimateBackrunGas({\n        triggerPoolId: params.poolId,\n        swapAmountIn: params.swapAmount,\n        token0In: params.token0In,\n        recipient: params.recipient,\n        configId: process.env.CONFIG_ID!,\n      });\n\n      console.log("\u26fd Estimated gas:", gasEstimate.toString());\n\n      // Execute backrun\n      const result = await this.reflex.triggerBackrun(\n        this.signer,\n        {\n          triggerPoolId: params.poolId,\n          swapAmountIn: params.swapAmount,\n          token0In: params.token0In,\n          recipient: params.recipient,\n          configId: process.env.CONFIG_ID!,\n        },\n        {\n          gasLimit: gasEstimate + BigInt(50000), // Add buffer\n        }\n      );\n\n      console.log("\u2705 Backrun executed successfully!");\n      console.log("\ud83d\udcb0 Profit:", ethers.formatEther(result.profit));\n      console.log("\ud83e\ude99 Token:", result.profitToken);\n      console.log("\ud83e\uddfe TX:", result.transaction.hash);\n\n      return result;\n    } catch (error) {\n      console.error("\u274c Backrun failed:", error);\n      throw error;\n    }\n  }\n\n  startEventListener() {\n    console.log("\ud83d\udc42 Starting event listener...");\n\n    this.reflex.onBackrunExecuted((event) => {\n      console.log("\ud83d\udd25 Backrun executed:", {\n        pool: event.triggerPoolId,\n        profit: ethers.formatEther(event.profit),\n        token: event.profitToken,\n        user: event.recipient,\n        block: event.blockNumber,\n        tx: event.transactionHash,\n      });\n    });\n\n    this.reflex.onRevenueDistributed((event) => {\n      console.log("\ud83d\udcb8 Revenue distributed:", {\n        config: event.configId,\n        token: event.token,\n        amount: ethers.formatEther(event.totalAmount),\n        block: event.blockNumber,\n      });\n    });\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"step-2-pool-monitor",children:"Step 2: Pool Monitor"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",metastring:'title="src/pool-monitor.ts"',children:'import { ethers } from "ethers";\nimport { ReflexClient } from "./reflex-client";\n\nexport class PoolMonitor {\n  private reflex: ReflexClient;\n  private provider: ethers.Provider;\n  private monitoredPools: Set<string> = new Set();\n\n  // Uniswap V2 Pair ABI (minimal)\n  private readonly PAIR_ABI = [\n    "event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to)",\n    "function token0() external view returns (address)",\n    "function token1() external view returns (address)",\n    "function getReserves() external view returns (uint112, uint112, uint32)",\n  ];\n\n  constructor() {\n    this.reflex = new ReflexClient();\n    this.provider = new ethers.JsonRpcProvider(process.env.RPC_URL);\n  }\n\n  async addPool(poolAddress: string) {\n    if (this.monitoredPools.has(poolAddress)) {\n      console.log("\u26a0\ufe0f Pool already monitored:", poolAddress);\n      return;\n    }\n\n    console.log("\ud83d\udd0d Adding pool to monitor:", poolAddress);\n\n    const poolContract = new ethers.Contract(\n      poolAddress,\n      this.PAIR_ABI,\n      this.provider\n    );\n\n    try {\n      // Verify it\'s a valid pool\n      const token0 = await poolContract.token0();\n      const token1 = await poolContract.token1();\n      const reserves = await poolContract.getReserves();\n\n      console.log("\u2705 Pool verified:", {\n        token0,\n        token1,\n        reserve0: ethers.formatEther(reserves[0]),\n        reserve1: ethers.formatEther(reserves[1]),\n      });\n\n      // Start monitoring swaps\n      poolContract.on("Swap", this.handleSwap.bind(this, poolAddress));\n      this.monitoredPools.add(poolAddress);\n    } catch (error) {\n      console.error("\u274c Failed to add pool:", error);\n    }\n  }\n\n  private async handleSwap(\n    poolAddress: string,\n    sender: string,\n    amount0In: bigint,\n    amount1In: bigint,\n    amount0Out: bigint,\n    amount1Out: bigint,\n    to: string,\n    event: ethers.EventLog\n  ) {\n    console.log("\ud83d\udd04 Swap detected in pool:", poolAddress);\n    console.log("\ud83d\udcca Swap details:", {\n      sender,\n      amount0In: ethers.formatEther(amount0In),\n      amount1In: ethers.formatEther(amount1In),\n      amount0Out: ethers.formatEther(amount0Out),\n      amount1Out: ethers.formatEther(amount1Out),\n      to,\n      block: event.blockNumber,\n      tx: event.transactionHash,\n    });\n\n    // Determine swap direction and amount\n    const isToken0In = amount0In > 0;\n    const swapAmountIn = isToken0In ? amount0In : amount1In;\n\n    // Check if swap is large enough for backrun\n    const minBackrunThreshold = ethers.parseEther("0.1"); // 0.1 ETH equivalent\n\n    if (swapAmountIn >= minBackrunThreshold) {\n      console.log("\ud83d\udca1 Large swap detected, attempting backrun...");\n\n      try {\n        await this.reflex.triggerBackrun({\n          poolId: poolAddress,\n          swapAmount: swapAmountIn / BigInt(10), // Use 10% for backrun\n          token0In: isToken0In,\n          recipient: sender, // Give profit back to original swapper\n        });\n      } catch (error) {\n        console.log("\u26a0\ufe0f Backrun not profitable or failed");\n      }\n    } else {\n      console.log("\ud83d\udccf Swap too small for backrun");\n    }\n  }\n\n  getMonitoredPools(): string[] {\n    return Array.from(this.monitoredPools);\n  }\n\n  removePool(poolAddress: string) {\n    if (this.monitoredPools.has(poolAddress)) {\n      // Remove event listeners\n      const poolContract = new ethers.Contract(\n        poolAddress,\n        this.PAIR_ABI,\n        this.provider\n      );\n      poolContract.removeAllListeners("Swap");\n\n      this.monitoredPools.delete(poolAddress);\n      console.log("\ud83d\uddd1\ufe0f Removed pool from monitoring:", poolAddress);\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"step-3-main-application",children:"Step 3: Main Application"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",metastring:'title="src/index.ts"',children:'import { ReflexClient } from "./reflex-client";\nimport { PoolMonitor } from "./pool-monitor";\n\n// Example pool addresses (Goerli testnet)\nconst EXAMPLE_POOLS = [\n  "0x742d35Cc6634C0532925a3b8D598C4B4B3A3A3A3", // Example WETH/USDC\n  "0x9E545E3C0baAB3E08CdfD552C960A1050f373042", // Example WETH/DAI\n];\n\nasync function main() {\n  console.log("\ud83d\ude80 Starting Reflex Backrun Example");\n\n  // Initialize components\n  const reflexClient = new ReflexClient();\n  const poolMonitor = new PoolMonitor();\n\n  // Check balance\n  const balance = await reflexClient.getBalance();\n  console.log("\ud83d\udcb0 Account balance:", ethers.formatEther(balance), "ETH");\n\n  if (balance < ethers.parseEther("0.1")) {\n    console.warn("\u26a0\ufe0f Low balance! You might not have enough ETH for gas fees.");\n  }\n\n  // Start event listeners\n  reflexClient.startEventListener();\n\n  // Add pools to monitor\n  console.log("\ud83d\udce1 Setting up pool monitoring...");\n  for (const poolAddress of EXAMPLE_POOLS) {\n    await poolMonitor.addPool(poolAddress);\n  }\n\n  console.log(\n    "\u2705 Monitoring started for",\n    poolMonitor.getMonitoredPools().length,\n    "pools"\n  );\n  console.log("\ud83d\udc40 Watching for swap events...");\n\n  // Keep the process running\n  process.stdin.resume();\n\n  // Graceful shutdown\n  process.on("SIGINT", () => {\n    console.log("\\n\ud83d\uded1 Shutting down gracefully...");\n\n    // Clean up\n    for (const pool of poolMonitor.getMonitoredPools()) {\n      poolMonitor.removePool(pool);\n    }\n\n    console.log("\ud83d\udc4b Goodbye!");\n    process.exit(0);\n  });\n}\n\n// Example: Manual backrun trigger\nasync function triggerManualBackrun() {\n  const reflexClient = new ReflexClient();\n\n  try {\n    await reflexClient.triggerBackrun({\n      poolId: EXAMPLE_POOLS[0],\n      swapAmount: ethers.parseEther("1.0"),\n      token0In: true,\n      recipient: "0xYourAddressHere",\n    });\n  } catch (error) {\n    console.error("Manual backrun failed:", error);\n  }\n}\n\n// Run the main application\nif (require.main === module) {\n  main().catch(console.error);\n}\n\nexport { main, triggerManualBackrun };\n'})}),"\n",(0,t.jsx)(e.h3,{id:"step-4-configuration-script",children:"Step 4: Configuration Script"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",metastring:'title="scripts/configure.ts"',children:'import { ethers } from "ethers";\nimport { ReflexSDK } from "@reflex/sdk";\nimport * as dotenv from "dotenv";\n\ndotenv.config();\n\nasync function configureRevenue() {\n  const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);\n  const signer = new ethers.Wallet(process.env.PRIVATE_KEY!, provider);\n\n  const reflex = new ReflexSDK(provider, process.env.REFLEX_ROUTER!);\n\n  console.log("\u2699\ufe0f Configuring revenue sharing...");\n\n  const config = {\n    configId: process.env.CONFIG_ID!,\n    recipients: [\n      await signer.getAddress(), // Your address: 60%\n      "0x742d35Cc6634C0532925a3b8D598C4B4B3A3A3A3", // Protocol fund: 25%\n      "0x9E545E3C0baAB3E08CdfD552C960A1050f373042", // Community: 15%\n    ],\n    shares: [60, 25, 15], // Must sum to 100\n  };\n\n  try {\n    const tx = await reflex.configureRevenue(signer, config);\n    await tx.wait();\n\n    console.log("\u2705 Revenue configuration complete!");\n    console.log("\ud83e\uddfe Transaction:", tx.hash);\n    console.log("\ud83c\udd94 Config ID:", config.configId);\n\n    // Verify configuration\n    const storedConfig = await reflex.getRevenueConfig(config.configId);\n    console.log("\ud83d\udccb Stored configuration:", {\n      recipients: storedConfig.recipients,\n      shares: storedConfig.shares,\n      isActive: storedConfig.isActive,\n    });\n  } catch (error) {\n    console.error("\u274c Configuration failed:", error);\n  }\n}\n\nconfigureRevenue().catch(console.error);\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-running-the-example",children:"\ud83d\ude80 Running the Example"}),"\n",(0,t.jsx)(e.h3,{id:"1-configure-revenue-sharing",children:"1. Configure Revenue Sharing"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npx ts-node scripts/configure.ts\n"})}),"\n",(0,t.jsx)(e.p,{children:"Expected output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\u2699\ufe0f Configuring revenue sharing...\n\u2705 Revenue configuration complete!\n\ud83e\uddfe Transaction: 0xabc123...\n\ud83c\udd94 Config ID: 0x1234567890123456789012345678901234567890123456789012345678901234\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-start-monitoring",children:"2. Start Monitoring"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npx ts-node src/index.ts\n"})}),"\n",(0,t.jsx)(e.p,{children:"Expected output:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\ud83d\ude80 Starting Reflex Backrun Example\n\ud83d\udcb0 Account balance: 0.5 ETH\n\ud83d\udce1 Setting up pool monitoring...\n\ud83d\udd0d Adding pool to monitor: 0x742d35Cc6634C0532925a3b8D598C4B4B3A3A3A3\n\u2705 Pool verified: {\n  token0: '0xA0b86a33E6a42E64d4C2a7f95F8b7E3b2C8d9E0f',\n  token1: '0xB7f8BC63BbcAD2c3b3C3d4e5F6e7d8E9f0A1B2c3',\n  reserve0: '1000.0',\n  reserve1: '2000000.0'\n}\n\ud83d\udc42 Starting event listener...\n\u2705 Monitoring started for 2 pools\n\ud83d\udc40 Watching for swap events...\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-when-a-swap-occurs",children:"3. When a Swap Occurs"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"\ud83d\udd04 Swap detected in pool: 0x742d35Cc6634C0532925a3b8D598C4B4B3A3A3A3\n\ud83d\udcca Swap details: {\n  sender: '0xUser123...',\n  amount0In: '1.0',\n  amount1In: '0.0',\n  amount0Out: '0.0',\n  amount1Out: '1950.0',\n  to: '0xUser123...',\n  block: 8123456,\n  tx: '0xdef456...'\n}\n\ud83d\udca1 Large swap detected, attempting backrun...\n\ud83c\udfaf Attempting backrun...\nPool: 0x742d35Cc6634C0532925a3b8D598C4B4B3A3A3A3\nAmount: 0.1\n\u26fd Estimated gas: 150000\n\u2705 Backrun executed successfully!\n\ud83d\udcb0 Profit: 0.0123\n\ud83e\ude99 Token: 0xA0b86a33E6a42E64d4C2a7f95F8b7E3b2C8d9E0f\n\ud83e\uddfe TX: 0x789abc...\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-understanding-the-results",children:"\ud83d\udcca Understanding the Results"}),"\n",(0,t.jsx)(e.p,{children:"When a backrun is successful, you'll see:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Swap Detection"}),": The monitor detects a swap in a monitored pool"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Opportunity Analysis"}),": Checks if the swap is large enough for backrun"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Gas Estimation"}),": Estimates the cost of executing the backrun"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Execution"}),": Executes the backrun if profitable"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Profit Distribution"}),": Distributes profits according to configuration"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"profit-calculation",children:"Profit Calculation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"Original Swap: 1.0 ETH \u2192 1950 USDC\nPrice Impact: Created arbitrage opportunity\nBackrun Amount: 0.1 ETH (10% of original)\nArbitrage Profit: 0.0123 ETH\nGas Cost: ~0.005 ETH\nNet Profit: 0.0073 ETH\n\nDistribution (based on config):\n- Your share (60%): 0.0044 ETH\n- Protocol (25%): 0.0018 ETH\n- Community (15%): 0.0011 ETH\n"})}),"\n",(0,t.jsx)(e.h2,{id:"-customization",children:"\ud83d\udd27 Customization"}),"\n",(0,t.jsx)(e.h3,{id:"adjust-backrun-parameters",children:"Adjust Backrun Parameters"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'// In pool-monitor.ts, modify these values:\nconst minBackrunThreshold = ethers.parseEther("0.5"); // Larger threshold\nconst backrunRatio = 20; // Use 5% instead of 10%\n\n// Use different ratio:\nswapAmount: swapAmountIn / BigInt(backrunRatio);\n'})}),"\n",(0,t.jsx)(e.h3,{id:"add-more-pools",children:"Add More Pools"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'// Add more pools to monitor\nconst MORE_POOLS = ["0xYourPool1", "0xYourPool2", "0xYourPool3"];\n\nfor (const pool of MORE_POOLS) {\n  await poolMonitor.addPool(pool);\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"custom-profit-sharing",children:"Custom Profit Sharing"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'// In configure.ts, modify the revenue config:\nconst config = {\n  configId: ethers.keccak256(ethers.toUtf8Bytes("MY_CUSTOM_CONFIG")),\n  recipients: [\n    await signer.getAddress(), // You: 40%\n    "0xProtocolTreasury", // Protocol: 30%\n    "0xLPProviders", // LPs: 20%\n    "0xCommunityFund", // Community: 10%\n  ],\n  shares: [40, 30, 20, 10],\n};\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-troubleshooting",children:"\ud83d\udc1b Troubleshooting"}),"\n",(0,t.jsx)(e.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"No swaps detected:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Check pool addresses are correct"}),"\n",(0,t.jsx)(e.li,{children:"Verify pools have active trading"}),"\n",(0,t.jsx)(e.li,{children:"Ensure RPC connection is stable"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Backruns always fail:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Check gas price settings"}),"\n",(0,t.jsx)(e.li,{children:"Verify account has sufficient ETH"}),"\n",(0,t.jsx)(e.li,{children:"Ensure pools have adequate liquidity"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"No profit distribution:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Verify revenue configuration is set"}),"\n",(0,t.jsx)(e.li,{children:"Check config ID matches in code"}),"\n",(0,t.jsx)(e.li,{children:"Ensure recipients are valid addresses"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,t.jsx)(e.p,{children:"Add debug logging:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:'// Add to .env\nDEBUG = true;\n\n// In your code:\nif (process.env.DEBUG === "true") {\n  console.log("\ud83d\udc1b Debug info:", {\n    poolReserves: reserves,\n    gasPrice: await provider.getFeeData(),\n    accountNonce: await signer.getNonce(),\n  });\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-next-steps",children:"\ud83c\udfaf Next Steps"}),"\n",(0,t.jsx)(e.p,{children:"Now that you have a basic backrun system working:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Advanced Examples"})," - Learn V3 integration patterns"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Custom Strategies"})," - Build custom MEV strategies"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Production Deployment"})," - Deploy to mainnet with proper testing"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Monitoring & Analytics"})," - Track performance with custom dashboards"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-additional-resources",children:"\ud83d\udcda Additional Resources"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"../api/smart-contracts",children:"Smart Contracts API"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"../integration/overview",children:"Integration Guide"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"../security/overview",children:"Security Overview"})}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.p,{children:"This example provides a solid foundation for MEV capture. The modular design allows you to easily extend and customize the system for your specific needs."})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}}}]);