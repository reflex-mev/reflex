"use strict";(self.webpackChunkreflex_docs=self.webpackChunkreflex_docs||[]).push([[543],{3747:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Overview","href":"/reflex/","docId":"index","unlisted":false},{"type":"link","label":"Architecture","href":"/reflex/architecture","docId":"architecture","unlisted":false},{"type":"category","label":"Integrations","items":[{"type":"link","label":"Integration Overview","href":"/reflex/integration/overview","docId":"integration/overview","unlisted":false},{"type":"link","label":"Revenue Configuration","href":"/reflex/integration/revenue-configuration","docId":"integration/revenue-configuration","unlisted":false},{"type":"link","label":"Smart Contract Integration","href":"/reflex/integration/smart-contract","docId":"integration/smart-contract","unlisted":false},{"type":"link","label":"SDK Integration","href":"/reflex/integration/sdk-integration","docId":"integration/sdk-integration","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"link","label":"Smart Contracts API","href":"/reflex/api/smart-contracts","docId":"api/smart-contracts","unlisted":false},{"type":"link","label":"SDK Reference","href":"/reflex/api/sdk-reference","docId":"api/sdk-reference","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Security","href":"/reflex/security","docId":"security","unlisted":false}]},"docs":{"api/sdk-reference":{"id":"api/sdk-reference","title":"SDK Reference","description":"Complete reference for the Reflex TypeScript SDK, providing easy integration with Reflex smart contracts.","sidebar":"tutorialSidebar"},"api/smart-contracts":{"id":"api/smart-contracts","title":"Smart Contracts API","description":"Complete API reference for Reflex smart contracts, covering all functions, events, and data structures.","sidebar":"tutorialSidebar"},"architecture":{"id":"architecture","title":"Architecture","description":"Understanding Reflex\'s architecture is key to building effective MEV capture strategies. This document provides a comprehensive overview of the system design, components, and data flow.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Overview","description":"Introduction","sidebar":"tutorialSidebar"},"integration/overview":{"id":"integration/overview","title":"Integration Overview","description":"Learn how to integrate Reflex into your DeFi protocol to capture and distribute MEV fairly among your users.","sidebar":"tutorialSidebar"},"integration/revenue-configuration":{"id":"integration/revenue-configuration","title":"Revenue Configuration","description":"Revenue sharing configurations in Reflex are centrally managed by the Reflex team to ensure security, consistency, and proper validation of all profit distribution mechanisms.","sidebar":"tutorialSidebar"},"integration/sdk-integration":{"id":"integration/sdk-integration","title":"SDK Integration","description":"Integrate Reflex MEV capture into your client applications, DApps, and custom trading strategies using the TypeScript SDK.","sidebar":"tutorialSidebar"},"integration/smart-contract":{"id":"integration/smart-contract","title":"Smart Contract Integration","description":"Integrate Reflex MEV capture directly into your smart contracts using either router direct access or plugin-based architecture.","sidebar":"tutorialSidebar"},"security":{"id":"security","title":"Security","description":"Reflex prioritizes security through multiple defensive layers designed to ensure safe and reliable MEV operations. This document outlines our comprehensive security architecture, implementation details, and best practices for secure integration.","sidebar":"tutorialSidebar"}}}}')}}]);