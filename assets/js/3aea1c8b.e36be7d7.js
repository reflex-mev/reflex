"use strict";(self.webpackChunkreflex_docs=self.webpackChunkreflex_docs||[]).push([[427],{5506:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var t=r(4848),i=r(8453);const s={sidebar_position:2},a="SDK Reference",c={id:"api/sdk-reference",title:"SDK Reference",description:"Complete reference for the Reflex TypeScript SDK, providing easy integration with Reflex Protocol smart contracts.",source:"@site/docs/api/sdk-reference.md",sourceDirName:"api",slug:"/api/sdk-reference",permalink:"/reflex/api/sdk-reference",draft:!1,unlisted:!1,editUrl:"https://github.com/reflex-mev/reflex/tree/main/website/docs/api/sdk-reference.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Smart Contracts API",permalink:"/reflex/api/smart-contracts"},next:{title:"Security",permalink:"/reflex/security"}},o={},l=[{value:"\ud83d\udce6 Installation",id:"-installation",level:2},{value:"\ud83d\ude80 Quick Start",id:"-quick-start",level:2},{value:"\ud83d\udd27 Configuration",id:"-configuration",level:2},{value:"ReflexConfig Interface",id:"reflexconfig-interface",level:3},{value:"Constructor",id:"constructor",level:3},{value:"\ud83d\udccb Core Methods",id:"-core-methods",level:2},{value:"<code>backrunedExecute()</code>",id:"backrunedexecute",level:3},{value:"<code>estimateBackrunedExecuteGas()</code>",id:"estimatebackrunedexecutegas",level:3},{value:"\ufffd Contract Information",id:"-contract-information",level:2},{value:"<code>getAdmin()</code>",id:"getadmin",level:3},{value:"<code>getQuoter()</code>",id:"getquoter",level:3},{value:"\ud83d\udcca Events &amp; Monitoring",id:"-events--monitoring",level:2},{value:"<code>watchBackrunExecuted()</code>",id:"watchbackrunexecuted",level:3},{value:"\ud83d\udd27 Utilities",id:"-utilities",level:2},{value:"<code>encodeBackrunedExecute()</code>",id:"encodebackrunedexecute",level:3},{value:"\ud83e\uddf0 Utility Functions",id:"-utility-functions",level:2},{value:"Address Validation",id:"address-validation",level:3},{value:"Token Amount Formatting",id:"token-amount-formatting",level:3},{value:"Profit Calculations",id:"profit-calculations",level:3},{value:"\u26a0\ufe0f Error Handling",id:"\ufe0f-error-handling",level:2},{value:"Common Error Types",id:"common-error-types",level:3},{value:"\ud83d\udcdd TypeScript Types",id:"-typescript-types",level:2},{value:"Core Interfaces",id:"core-interfaces",level:3},{value:"\ud83d\udca1 Example Usage",id:"-example-usage",level:2},{value:"Basic Backrun Execution",id:"basic-backrun-execution",level:3},{value:"Event Monitoring",id:"event-monitoring",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"sdk-reference",children:"SDK Reference"})}),"\n",(0,t.jsx)(n.p,{children:"Complete reference for the Reflex TypeScript SDK, providing easy integration with Reflex Protocol smart contracts."}),"\n",(0,t.jsx)(n.h2,{id:"-installation",children:"\ud83d\udce6 Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @reflex-mev/sdk\n# or\nyarn ad### Token Amount Fo### Profit Calculations\n\n```typescript\nimport { calculateProfitPercentage } from '@reflex-mev/sdk/utils';ting\n\n```typescript\nimport { formatTokenAmount, parseTokenAmount } from '@reflex-mev/sdk/utils';eflex-mev/sdk\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-quick-start",children:"\ud83d\ude80 Quick Start"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { ReflexSDK } from '@reflex-mev/sdk';\nimport { ethers } from 'ethers';\n\n// Initialize provider and signer\nconst provider = new ethers.JsonRpcProvider('https://mainnet.infura.io/v3/YOUR_KEY');\nconst signer = new ethers.Wallet('YOUR_PRIVATE_KEY', provider);\n\n// Configuration\nconst config = {\n    routerAddress: '0x742d35Cc6634C0532925a3b8D598C4B4B3A3A3A3',\n    defaultGasLimit: 500000n,\n    gasPriceMultiplier: 1.1,\n};\n\n// Create SDK instance\nconst reflex = new ReflexSDK(provider, signer, config);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-configuration",children:"\ud83d\udd27 Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"reflexconfig-interface",children:"ReflexConfig Interface"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface ReflexConfig {\n    /** Address of the deployed Reflex Router contract */\n    routerAddress: string;\n    /** Optional address of the Reflex Quoter contract */\n    quoterAddress?: string;\n    /** Default gas limit for transactions (default: 500000) */\n    defaultGasLimit?: bigint;\n    /** Multiplier for gas price estimation (default: 1.1) */\n    gasPriceMultiplier?: number;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"constructor(\n    provider: Provider, \n    signer: Signer, \n    config: ReflexConfig\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"provider"})," - Ethers provider for reading blockchain data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"signer"})," - Ethers signer for sending transactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"config"})," - Configuration for the Reflex Router"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"-core-methods",children:"\ud83d\udccb Core Methods"}),"\n",(0,t.jsx)(n.h3,{id:"backrunedexecute",children:(0,t.jsx)(n.code,{children:"backrunedExecute()"})}),"\n",(0,t.jsx)(n.p,{children:"Executes arbitrary calldata on a target contract and then triggers multiple backruns."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const result = await reflex.backrunedExecute(\n    executeParams,\n    backrunParams,\n    options\n);\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface ExecuteParams {\n    target: string;     // Target contract address to call\n    value: bigint;      // ETH value to send with the call (in wei)\n    callData: BytesLike; // Encoded calldata to execute\n}\n\ninterface BackrunParams {\n    triggerPoolId: string;    // Pool ID that triggered the opportunity\n    swapAmountIn: BigNumberish; // Input swap amount\n    token0In: boolean;        // Whether token0 is used as input\n    recipient: string;        // Address to receive profits\n    configId?: string;        // Configuration ID for profit splitting\n}\n\ninterface TransactionOptions {\n    gasLimit?: bigint;\n    gasPrice?: bigint;\n    maxFeePerGas?: bigint;\n    maxPriorityFeePerGas?: bigint;\n    nonce?: number;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface BackrunedExecuteResult {\n    success: boolean;           // Whether the initial call succeeded\n    returnData: string;         // Return data from the initial call\n    profits: bigint[];          // Array of profits from each backrun\n    profitTokens: string[];     // Array of profit token addresses\n    transactionHash: string;    // Transaction hash\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"estimatebackrunedexecutegas",children:(0,t.jsx)(n.code,{children:"estimateBackrunedExecuteGas()"})}),"\n",(0,t.jsx)(n.p,{children:"Estimates gas for a backruned execute operation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const gasEstimate = await reflex.estimateBackrunedExecuteGas(\n    executeParams,\n    backrunParams\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"bigint"})," - Estimated gas limit"]}),"\n",(0,t.jsx)(n.h2,{id:"-contract-information",children:"\ufffd Contract Information"}),"\n",(0,t.jsx)(n.h3,{id:"getadmin",children:(0,t.jsx)(n.code,{children:"getAdmin()"})}),"\n",(0,t.jsx)(n.p,{children:"Gets the current owner/admin of the Reflex Router."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const adminAddress = await reflex.getAdmin();\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"string"})," - The address of the current admin"]}),"\n",(0,t.jsx)(n.h3,{id:"getquoter",children:(0,t.jsx)(n.code,{children:"getQuoter()"})}),"\n",(0,t.jsx)(n.p,{children:"Gets the current ReflexQuoter address."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const quoterAddress = await reflex.getQuoter();\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"string"})," - The address of the ReflexQuoter contract"]}),"\n",(0,t.jsx)(n.h2,{id:"-events--monitoring",children:"\ud83d\udcca Events & Monitoring"}),"\n",(0,t.jsx)(n.h3,{id:"watchbackrunexecuted",children:(0,t.jsx)(n.code,{children:"watchBackrunExecuted()"})}),"\n",(0,t.jsx)(n.p,{children:"Listens for BackrunExecuted events from the contract."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const unsubscribe = reflex.watchBackrunExecuted(\n    (event) => {\n        console.log('Backrun executed:', {\n            triggerPoolId: event.triggerPoolId,\n            profit: event.profit,\n            profitToken: event.profitToken,\n            recipient: event.recipient,\n        });\n    },\n    {\n        triggerPoolId: '0x123...', // Optional filter\n        profitToken: '0x456...',   // Optional filter  \n        recipient: '0x789...',     // Optional filter\n    }\n);\n\n// Unsubscribe when done\nunsubscribe();\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Event Structure:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface BackrunExecutedEvent {\n    triggerPoolId: string;  // Pool ID that triggered the backrun\n    swapAmountIn: bigint;   // Input swap amount\n    token0In: boolean;      // Whether token0 was used as input\n    profit: bigint;         // Profit amount generated\n    profitToken: string;    // Token address in which profit was generated\n    recipient: string;      // Address that received the profit\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-utilities",children:"\ud83d\udd27 Utilities"}),"\n",(0,t.jsx)(n.h3,{id:"encodebackrunedexecute",children:(0,t.jsx)(n.code,{children:"encodeBackrunedExecute()"})}),"\n",(0,t.jsx)(n.p,{children:"Encodes function data for backruned execute (useful for batch transactions)."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const encodedData = reflex.encodeBackrunedExecute(\n    executeParams,\n    backrunParams\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"string"})," - Encoded function data\n",(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"string"})," - Encoded function data"]}),"\n",(0,t.jsx)(n.h2,{id:"-utility-functions",children:"\ud83e\uddf0 Utility Functions"}),"\n",(0,t.jsx)(n.h3,{id:"address-validation",children:"Address Validation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { isValidAddress, isValidBytes32 } from '@reflex-mev/sdk/utils';\n\n// Check if address is valid\nif (isValidAddress('0x742d35Cc6634C0532925a3b8D598C4B4B3A3A3A3')) {\n    console.log('Valid address');\n}\n\n// Check if bytes32 value is valid (e.g., pool ID)\nif (isValidBytes32('0x1234567890abcdef...')) {\n    console.log('Valid bytes32');\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"token-amount-formatting",children:"Token Amount Formatting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { formatTokenAmount, parseTokenAmount } from '@reflex/sdk/utils';\n\n// Format BigInt to human-readable string\nconst formatted = formatTokenAmount(\n    1500123456789012345678n, // BigInt value\n    18 // decimals\n); // \"1500.123456789012345678\"\n\n// Parse string to BigInt\nconst parsed = parseTokenAmount('1500.123456', 18);\n// Returns: 1500123456000000000000n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"profit-calculations",children:"Profit Calculations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { calculateProfitPercentage } from '@reflex/sdk/utils';\n\n// Calculate profit percentage\nconst profitPercent = calculateProfitPercentage(\n    150000000000000000n, // 0.15 ETH profit\n    1000000000000000000n // 1 ETH investment\n); // Returns: 15 (15%)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-error-handling",children:"\u26a0\ufe0f Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"try {\n    const result = await reflex.backrunedExecute(\n        executeParams,\n        backrunParams\n    );\n    \n    if (!result.success) {\n        console.error('Backrun execution failed');\n    } else {\n        console.log('Profits:', result.profits);\n    }\n} catch (error) {\n    console.error('SDK Error:', error.message);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"common-error-types",children:"Common Error Types"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Error Type"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Solution"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Gas estimation failed"})}),(0,t.jsx)(n.td,{children:"Cannot estimate gas for transaction"}),(0,t.jsx)(n.td,{children:"Check parameters and network connection"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Transaction failed"})}),(0,t.jsx)(n.td,{children:"Transaction reverted on-chain"}),(0,t.jsx)(n.td,{children:"Verify contract state and parameters"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Backruned execute failed"})}),(0,t.jsx)(n.td,{children:"Execute + backrun operation failed"}),(0,t.jsx)(n.td,{children:"Check target contract and backrun parameters"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"-typescript-types",children:"\ud83d\udcdd TypeScript Types"}),"\n",(0,t.jsx)(n.h3,{id:"core-interfaces",children:"Core Interfaces"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Available imports\nimport {\n    ReflexSDK,\n    ExecuteParams,\n    BackrunParams,\n    BackrunedExecuteResult,\n    ReflexConfig,\n    TransactionOptions,\n    BackrunExecutedEvent,\n} from '@reflex-mev/sdk';\n\n// Type definitions\ninterface ExecuteParams {\n    target: string;\n    value: bigint;\n    callData: BytesLike;\n}\n\ninterface BackrunParams {\n    triggerPoolId: string;\n    swapAmountIn: BigNumberish;\n    token0In: boolean;\n    recipient: string;\n    configId?: string;\n}\n\ninterface BackrunedExecuteResult {\n    success: boolean;\n    returnData: string;\n    profits: bigint[];\n    profitTokens: string[];\n    transactionHash: string;\n}\n\ninterface BackrunExecutedEvent {\n    triggerPoolId: string;\n    swapAmountIn: bigint;\n    token0In: boolean;\n    profit: bigint;\n    profitToken: string;\n    recipient: string;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-example-usage",children:"\ud83d\udca1 Example Usage"}),"\n",(0,t.jsx)(n.h3,{id:"basic-backrun-execution",children:"Basic Backrun Execution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { ReflexSDK } from '@reflex-mev/sdk';\nimport { ethers } from 'ethers';\n\nasync function executeBackrun() {\n    const provider = new ethers.JsonRpcProvider(RPC_URL);\n    const signer = new ethers.Wallet(PRIVATE_KEY, provider);\n    \n    const reflex = new ReflexSDK(provider, signer, {\n        routerAddress: '0x742d35Cc6634C0532925a3b8D598C4B4B3A3A3A3',\n        defaultGasLimit: 500000n,\n    });\n\n    // Prepare execute parameters (e.g., Uniswap swap)\n    const executeParams = {\n        target: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // Uniswap V2 Router\n        value: 0n,\n        callData: '0x...' // Encoded swap function call\n    };\n\n    // Prepare backrun parameters\n    const backrunParams = [{\n        triggerPoolId: '0x1234...', // Pool that will be affected by the swap\n        swapAmountIn: ethers.parseEther('1'), // 1 ETH backrun\n        token0In: true,\n        recipient: await signer.getAddress(),\n        configId: '0x0000...', // Use default config\n    }];\n\n    try {\n        const result = await reflex.backrunedExecute(\n            executeParams,\n            backrunParams\n        );\n\n        console.log('Transaction hash:', result.transactionHash);\n        console.log('Profits:', result.profits.map(p => ethers.formatEther(p)));\n    } catch (error) {\n        console.error('Error:', error.message);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"event-monitoring",children:"Event Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Monitor all backrun events\nconst unsubscribe = reflex.watchBackrunExecuted((event) => {\n    console.log(`Backrun executed on pool ${event.triggerPoolId}`);\n    console.log(`Profit: ${ethers.formatEther(event.profit)} ${event.profitToken}`);\n});\n\n// Monitor events for specific pool\nconst unsubscribePool = reflex.watchBackrunExecuted(\n    (event) => {\n        console.log('Our pool backrun:', event);\n    },\n    { triggerPoolId: '0x1234...' }\n);\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["For more detailed integration guidance, see our ",(0,t.jsx)(n.a,{href:"../integration/sdk-integration",children:"SDK Integration Guide"})," and ",(0,t.jsx)(n.a,{href:"../integration/smart-contract",children:"Smart Contract Integration"}),"."]})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);